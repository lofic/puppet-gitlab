#!/bin/bash

echo
echo '== Begin pre-receive hook =='
echo

facility=local3
export PATH=$PATH:/opt/puppetlabs/puppet/bin:/usr/local/bin
RESET="\033[0m"; RED="\033[31m"

# Puppet attempts to source ~/.puppet and will error if $HOME is not set
if [[ -z $HOME ]]
then
  HOME="$(grep "${USER}:" /etc/passwd | awk -F ':' '{print $6}')"
  export HOME
fi

failures=0
RC=0

hook_dir="$(dirname "$0")"
hook_symlink="$(readlink -f "$0")"

# Figure out where commit hooks are if pre-receive is setup as a symlink
if [[ ! -z "$hook_symlink" ]]; then
  subhook_root="$(dirname "$hook_symlink")/commit_hooks"
else
  subhook_root="$hook_dir/commit_hooks"
fi

tmptree=$(mktemp -d)

# Prevent tput from throwing an error by ensuring that $TERM is always set
if [[ -z "$TERM" ]]; then
    TERM=dumb
fi
export TERM

# Decide if we want puppet-lint
CHECK_PUPPET_LINT="enabled"
# MAY BE OVERRIDDEN IN ${subhook_root}/config.cfg

# Decide if we want the puppet future parser (already on puppet 4?)
USE_PUPPET_FUTURE_PARSER="disabled"
# MAY BE OVERRIDDEN IN ${subhook_root}/config.cfg

CHECK_INITIAL_COMMIT="disabled"
# MAY BE OVERRIDDEN IN ${subhook_root}/config.cfg

if [[ -e ${subhook_root}/config.cfg ]] ; then
    source "${subhook_root}/config.cfg"
fi

# This is required for GitLab
# See https://github.com/drwahl/puppet-git-hooks/issues/76
if [[ $UNSET_RUBY_ENV == "enabled" ]] ; then
    unset BUNDLE_GEMFILE RUBYLIB RUBYOPT GEM_HOME
fi

while read -r oldrev newrev refname; do

    scriptpath=$( dirname "$0" )
    branch=$( echo "$refname" |cut -d '/' -f 3 )

    projectpath=$(dirname "$scriptpath")
    fullpath=$(awk -F'[[:blank:]]*=[[:blank:]]*' '/fullpath/ { print $2 }' $projectpath/config)
    namespace=${fullpath%/*}
    project=${fullpath#*/}

    git archive "$newrev" | tar x -C "$tmptree"

    # for a new branch oldrev is 0{40}, set oldrev to the commit where we branched off the parent
    if [[ $oldrev == "0000000000000000000000000000000000000000" ]]; then
      oldrev=$(git rev-list --boundary $newrev --not --all | sed -n 's/^-//p')
    fi

    files_list=''
    if [[ "x$oldrev" == 'x' ]]; then
      if [[ $CHECK_INITIAL_COMMIT != "disabled" ]] ; then
        files_list=$(git ls-tree --full-tree -r HEAD --name-only)
      else
        echo "Skipping file checks this is the initial commit..."
      fi
    else
      files_list=$(git diff --name-only "$oldrev" "$newrev" --diff-filter=ACM)
    fi

    echo "project $project - branch $branch - oldrev ${oldrev:0:8} - newrev ${newrev:0:8}" \
       | logger -p ${facility}.info

    tag="$namespace/$project|$branch|${oldrev:0:8}|${newrev:0:8}"

    for changedfile in $files_list; do
        tmpmodule="$tmptree/$changedfile"
        [[ -f "$tmpmodule" ]] || continue

        #check puppet manifest syntax
        if [[ $CHECK_PUPPET_SYNTAX != "disabled" ]] ; then
            if type puppet >/dev/null 2>&1; then
                if [[ $(echo "$changedfile" | grep -q '\.*\.epp$'; echo $?) -eq 0 ]]; then
                    set -o pipefail
                    ${subhook_root}/puppet_epp_syntax_check.sh "$tmpmodule" "${tmptree}/" \
                            | logger -p ${facility}.info -s -t $tag
                    RC=$?
                    set +o pipefail
                    if [[ $RC -ne 0 ]]; then
                      failures=$((failures + 1))
                    fi
                elif [[ $(echo "$changedfile" | grep -q '\.*\.pp$'; echo $?) -eq 0 ]]; then
                    set -o pipefail
                    ${subhook_root}/puppet_manifest_syntax_check.sh "$tmpmodule" "${tmptree}/" \
                            "$USE_PUPPET_FUTURE_PARSER" | logger -p ${facility}.info -s -t $tag
                    RC=$?
                    set +o pipefail
                    if [[ $RC -ne 0 ]]; then
                      failures=$((failures + 1))
                    fi
                fi
            else
                echo "puppet not installed. Skipping puppet syntax checks..." \
                   | logger -p ${facility}.info -s -t $tag
            fi
        fi

        if type ruby >/dev/null 2>&1; then
            #check ruby syntax
            if [ "${namespace}" = "puppet_module" ]; then
              if [[ $(echo "$changedfile" | grep -q '\.*\.rb$'; echo $?) -eq 0 ]]; then
                  set -o pipefail
                  ${subhook_root}/ruby_syntax_check.sh "$tmpmodule" "${tmptree}/" \
                    | logger -p ${facility}.info -s -t $tag
                  RC=$?
                  set +o pipefail
                  if [[ $RC -ne 0 ]]; then
                    failures=$((failures + 1))
                  fi
              fi
            fi

            #check erb (template file) syntax
            if [ "${namespace}" = "puppet_module" ]; then
              if type erb >/dev/null 2>&1; then
                if [[ $(echo "$changedfile" | grep -q '\.*\.erb$'; echo $?) -eq 0 ]]; then
                      set -o pipefail
                      ${subhook_root}/erb_template_syntax_check.sh "$tmpmodule" "${tmptree}/" \
                        | logger -p ${facility}.info -s -t $tag
                      RC=$?
                      set +o pipefail
                      if [[ $RC -ne 0 ]]; then
                        failures=$((failures + 1))
                      fi
                  fi
              else
                  echo "erb not installed. Skipping erb template checks..." \
                     | logger -p ${facility}.info -s -t $tag
              fi
            fi

            #check hiera data (yaml/eyaml/yml) syntax
            if [ $namespace = "puppet" ] && [[ $(echo "$changedfile" | grep -q '\.*\.yaml$\|\.*\.yml$\|\.*\.eyaml$'; echo $?) -eq 0 ]]; then
                set -o pipefail
                ${subhook_root}/yaml_syntax_check.sh "$tmpmodule" "${tmptree}/" \
                  | logger -p ${facility}.info -s -t $tag
                RC=$?
                set +o pipefail
                if [[ $RC -ne 0 ]]; then
                  failures=$((failures + 1))
                fi
            fi

            #check hiera data (json) syntax
            if [ $namespace = "puppet" ] && [[ $(echo "$changedfile" | grep -q '\.*\.json$'; echo $?) -eq 0 ]]; then
                set -o pipefail
                ${subhook_root}/json_syntax_check.sh "$tmpmodule" "${tmptree}/" \
                  | logger -p ${facility}.info -s -t $tag
                RC=$?
                set +o pipefail
                if [[ $RC -ne 0 ]]; then
                  failures=`expr $failures + 1`
                fi
            fi
        else
            echo "ruby not installed. Skipping erb/yaml checks..." \
               | logger -p ${facility}.info -s -t $tag
        fi

        #puppet manifest styleguide compliance
        if [[ $CHECK_PUPPET_LINT != "disabled" ]] ; then
            if type puppet-lint >/dev/null 2>&1; then
                if [[ $(echo "$changedfile" | grep -q '\.*\.pp$' ; echo $?) -eq 0 ]]; then
                    set -o pipefail
                    ${subhook_root}/puppet_lint_checks.sh "$CHECK_PUPPET_LINT" "$tmpmodule" "${tmptree}/" \
                      | logger -p ${facility}.info -s -t $tag
                    RC=$?
                    set +o pipefail
                    if [[ $RC -ne 0 ]]; then
                      failures=$((failures + 1))
                    fi
                fi
            else
                echo "puppet-lint not installed. Skipping puppet-lint tests..." \
                   | logger -p ${facility}.info -s -t $tag
            fi
        fi

        # r10k syntax
        CHECK_R10K='disabled'
        if hash r10k >/dev/null 2>&1; then
          if [[ $CHECK_R10K != "disabled" ]] ; then
              if [[ "$changedfile" = "Puppetfile" ]]; then
                    set -o pipefail
                    echo "Debug : tmp file is ${tmptree}/${changedfile}"
                    ${subhook_root}/r10k_syntax_check.sh "${tmptree}/${changedfile}" \
                      | logger -p ${facility}.info -s -t $tag
                    RC=$?
                    set +o pipefail
                    if [[ $RC -ne 0 ]]; then
                      failures=$((failures + 1))
                    fi
              fi
          fi
        else
            echo "r10k not installed. Skipping r10k Puppetfile test..."
        fi

    done

done

rm -rf "$tmptree"

#summary
if [ "$failures" -ne 0 ]; then
    echo -e "$(tput setaf 1) ${RED}[ ERROR ]${RESET}: $failures subhooks failed. Declining push.$(tput sgr0)"
    echo "[ ERROR ]: $failures subhooks failed in pre-receive hook. Declining push." \
       | logger -p ${facility}.err -t $tag
    exit 1
fi

echo
echo '== End pre-receive hook =='

exit 0
